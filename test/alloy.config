// create a local file match named "local_files" for all files in /var/log
local.file_match "local_files" {
  path_targets = [{"__path__" = "/var/log/**/*.log"}]
  sync_period = "5s"
}

// create a loki.source.file component named "log_scrape" that reads from the local file match
// and tails from the end of the file
// forward logs to the loki.process.filter_logs component
loki.source.file "log_scrape" {
  targets = local.file_match.local_files.targets
  forward_to = [loki.process.filter_logs.receiver]
  tail_from_end = true
}

// create a loki.process.filter_logs component named "filter_logs"
// receives logs from log_scraper and drops logs that match the expression
// using optional string "drop_counter_reason" to provide a reason for dropping logs
loki.process "filter_logs" {
  stage.drop {
    source = ""
    expression = ".*Connection closed by authenticating user root.*"
    drop_counter_reason = "noisy"
  }
  forward_to = [loki.write.grafana_loki.receiver]
}

// write logs to loki server
loki.write "grafana_loki" {
  endpoint {
    url = "http://loki:3100/loki/api/v1/push"
    // basic_auth {
    //     username = "admin"
    //     password = "admin"
    // }
  }
}

// traces
// otel receiver
otelcol.exporter.otlp "receiver" {
    client {
        endpoint = "tempo:4317"
        tls {
            insecure = true
        }
    }
}
